1.Расширения могут быть использованы для расширения функциональности классов, структур, перечислений и протоколов.
extensions

2.В расширениях можно определять функции, вычисляемые и хранимые свойства, инициализаторы, вложенные типы и т.д.

3.Протокол определяет набор требований для типов, которые могут его реализовать, обеспечивая единообразие и гибкость взаимодействия между объектами разных типов.

4.Пример протокола с требованием наличия свойства "name":
protocol Named {
    var name: String { get set }
}

Чтобы задать требование доступности и изменяемости, нужно использовать ключевые слова public, internal, private и var или let соответственно перед объявлением свойства.

5.Пример расширения протокола Named, добавляющего функцию greet:
extension Named {
    func greet() {
        print("Hello, my name is \(name).")
    }
}
6.Классовый протокол - это протокол, который может быть реализован только классом.

7.Композиция протоколов - это объединение нескольких протоколов в один, используя оператор &. Она может быть использована там, где требуется тип, реализующий все требования, определенные в нескольких протоколах.

8.Связанный тип в протоколе - это тип, который будет определен только при реализации протокола. Для его использования нужно определить ассоциированный тип с помощью ключевого слова associatedtype в определении протокола, а затем определить его в реализации