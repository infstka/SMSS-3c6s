1.Какой синтаксис определения функции?
   func имяФункции (входные_параметры) -> ТипВозвращаемогоЗначения { 
       тело_функции   
 }
2.Можно ли при вызове функции опустить имя параметра?
да, указав _
3.Можно ли изменять значения параметров функции в теле функции? Почему?
нет, так как параметры представляют константные значения
4.Как задать вложенную функцию? Перечислите ее основные свойства.
указать ее в теле основной функции
5.Как можно вернуть функцию из функции? Приведите пример.
func makeIncrementer() -> ((Int) -> Int) {
    func addOne(number: Int) -> Int {
        return 1 + number
    }
    return addOne
    }
var increment = makeIncrementer()
increment(7)
6.Что такое сквозные параметры функции? Как их можно использовать?
с помощью inout, передает значение в функцию, которое изменяется в ней и возвращается из функции, заменяя исходное значение
7.Приведите пример, функции которая в качестве аргумента принимает другую функцию.
func hasAnyMatches(list: [Int], condition:(Int)-> Bool)->Bool{
  for item in list {
    if condition(item) {
        return true
        }
   }
    return false
}
func lessThanTen(number: Int) -> Bool {
    return number < 10
}
var numbers = [20, 19, 7, 12]
hasAnyMatches(list: numbers, condition: lessThanTen)//true
8.Что такое замыкания? Приведите пример.
блоки кода с определенным функционалом, которые могут быть переданы и использованы в коде
9.Для чего нужно каррирование функций? Как это можно выполнить?
Каррирование — это процесс, при котором функция от нескольких аргументов преобразуется в функцию (или набор функций) от одного аргумента
10.Какие есть способы захвата внешних переменных в замыкании?
- вложенная функция, написанная в теле другой функции
- в начале замыкания в квадратных скобках необходимо перечислить захватываемые переменные, разделив их запятой, после чего указать ключевое слово in
11.Что называется автозамыканием? Какие требования нужно выполнить, чтобы реализовать автозамыкание?
Автозамыкания — это замыкания, которые автоматически создаются из переданного выражения. 
•	Входной аргумент должен иметь функциональный тип. В примере, приведенном ранее, аргумент nextName уже имеет функциональный тип ()->String .
•	Функциональный тип не должен определять типы входных параметров. В примере типы входных параметров не определены (пустые  скобки) . 
•	Функциональный тип должен определять тип возвращаемого значения. В примере тип возвращаемого значения определен как String. 
•	Переданное выражение должно возвращать значение того же типа, которое определено в функциональном типе замыкания. В примере передаваемая в качестве входного аргумента функция возвращает значение типа String точно так же, как определено функциональным типом входного аргумента. 
•	Перед функциональным типом необходимо использовать атрибут @autoclosure. 
•	Передаваемое значение должно указываться без фигурных скобок . Перепишем код из предыдущего листинга в соответствии с указанными требованиями
12.Для чего в замыкании используется атрибут @escaping?
Для того чтобы позволить замыканию выйти за пределы области видимости функции, необходимо указать атрибут @escaping перед функциональным типом при описании входных параметров функции.