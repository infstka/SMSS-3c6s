Конструкция "var things = Any" позволяет создать массив, в котором могут храниться элементы любого типа данных, так как в Swift все типы наследуются от типа Any.

Конструкция "let someObjects: [AnyObject] = [Dog(),NoisyDog(),Dog()]" создает массив, в котором могут храниться экземпляры любого класса. Для этого используется псевдоним AnyObject, который указывает на то, что тип данных может быть экземпляром любого класса.

Назначенный инициализатор - это метод класса или структуры, который производит установку значений свойств. Он не может вызывать другой назначенный инициализатор, а может вызываться только из инициализатора производного класса для установки значений наследуемых свойств.

Вспомогательный инициализатор - это метод, который дополняет назначенный инициализатор и может принимать входные аргументы и устанавливать значения для свойств. Он объявляется с помощью модификатора convenience и может вызывать только другой инициализатор того же объектного типа или назначенный инициализатор.

Проваливающийся инициализатор возвращает nil при попытке создания экземпляра и используется, например, для проверки корректности передаваемых аргументов. Он объявляется с помощью ключевого слова init?.

Обязательный инициализатор должен быть реализован во всех подклассах данного класса и объявляется с помощью модификатора required.

Деинициализатор автоматически вызывается при уничтожении экземпляра класса и объявляется с помощью ключевого слова deinit.

Опциональные цепочки позволяют удобно обращаться к свойствам и методам объектов, проверяя при этом наличие объектов по пути к ним. Если какой-то объект по пути не существует, то вместо выбрасывания ошибки будет возвращено значение nil.