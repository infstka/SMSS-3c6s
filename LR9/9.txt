1.Уровни разграничения доступа в Swift:
private: доступен только внутри текущего типа;
fileprivate: доступен в текущем файле;
internal: доступен в рамках текущего модуля;
public: доступен в любом модуле, но только для чтения;
open: доступен в любом модуле, и может быть переопределен в подклассах из других модулей.

2.Ключевое слово open отличается от public тем, что open позволяет переопределять свойства и методы в подклассах из других модулей, тогда как public не позволяет этого.

3. Уровень доступа по умолчанию - internal, что означает, что члены типа доступны внутри текущего модуля.

4. Да, уровень доступа членов типа зависит от уровня доступа самого типа. Например, если тип объявлен как private, то все его члены также будут иметь уровень private и не будут доступны извне.

5. Уровень доступа функции определяется по уровню доступа наиболее ограничительного параметра входа или выхода функции.

6. Пример универсального типа:
struct Stack<T> {
    var items = [T]()
    mutating func push(_ item: T) {
        items.append(item)
    }
    mutating func pop() -> T? {
        return items.popLast()
    }
}

Пример универсальной функции:

func printArray<T>(_ array: [T]) {
    for element in array {
        print(element)
    }
}

7. Да, для универсального типа можно сделать расширение. Пример:

extension Stack {
    var topItem: T? {
        return items.isEmpty ? nil : items[items.count - 1]
    }
}

8. Ограничение на тип в универсальном шаблоне можно сделать, используя ключевое слово where и определяя требования для типа. Пример:
func sum<T: Numeric>(_ a: T, _ b: T) -> T {
    return a + b
}
В данном примере, универсальный тип T должен соответствовать требованию, быть числовым типом.