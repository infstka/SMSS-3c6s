1. let, var
2. нет
3. без цифр в начале и лишних знаков
4. print, println
5. 
// однострочный
/* */ многострочный
/* /**/ */ вложенный многострочный
// MARK: - маркированный (markdown) комментарий
6. Int, Double, Bool, String, Float, UIInt
7. 32 64
8. Числовые литералы могут содержать дополнительное форматирование, 
чтобы их было удобнее читать. 
Целые числа и числа с плавающей точкой могут быть дополнены нулями
и могут содержать символы подчеркивания для увеличения читабельности
9. В Swift есть возможность создания многострочных литералов . Для этого текст обрамляется с обеих сторон тремя двойными кавычками ("""строковый литерал""")
10. Псевдонимы типов задают альтернативное имя для существующего типа. 
Можно задать псевдоним типа с помощью ключевого слова typealias.
11.let tupleName = (elem1, elem2)
12.
let (statusCode, statusMessage) = http404Error
print("Код статуса \(statusCode)")
13.Сравнение кортежей производится последовательным сравнением элементов кортежей: вначале сравниваются первые элементы обоих кортежей; если они идентичны, то производится сравнение следующих элементов, и так далее до тех пор, пока не будут обнаружены неидентичные элементы
14.Опциональные типы используются в тех случаях, когда значение может отсутствовать. Опциональный тип подразумевает, что возможны два варианта: или значение есть, и его можно извлечь из опционала, либо его вообще нет.
15.String?
16.Значение nil может применяться только к объектам опциональных типов. Если объект не имеет значения, то ему присваивается специальное значение nil
17.Неявно развернутая опциональная константа или переменная — это обычная опциональная переменная в своей сути, но может быть использована как неопциональная, без необходимости «доставать» ее значение при каждом доступе
18.
let possibleString: String? = "Опциональная строка"
print(possibleString!) // необходимо использовать восклицательный знак, чтобы получить доступ к значению
// получим на экране "Опциональная строка"
19.let (x, y ) = (1, 2)
20. выражения a % b и a % -b всегда будут давать одинаковый результат.
21.извлекает опционал a , если он содержит значение, или возвращает значение по умолчанию b, если a является нулевым указателем (nil). Выражение a может быть только опционалом. Выражение b должно быть такого же типа, что и значение внутри a.
22.
Оператор закрытого диапазона (a…b ) определяет диапазон который идет от a до b включая значения a  и b
Оператор полузакрытого диапазона (a..<b) определяет диапазон который идет от a до b, не включая b. 
23.При интерполяции происходит объединение строковых литералов, переменных, констант и выражений в едином строковом литерале
24.
for-in(перебрать элементы коллекции)
while(проверяет некоторое условие, и если оно возвращает true, то выполняет блок кода)
repeat-while(выполняет один раз цикл, и если некоторое условие возвращает true, то продолжает выполнение цикла)
25.Однако в некоторых случаях требуется не завершать работу конструкции switch-case, а перейти к выполнению кода в следующем блоке case. Для этого в конце блока case указывается ключевое слово fallthrough
26.Ключевое слово where ставится в блоке case после перечисления значений, за ним следует логическое выражение, которое должно вернуть true или false . Код в блоке case выполняется, когда найдено совпадающее значение и условие where вернуло true. 
27.stride
28.Оператор guard называется оператором раннего выхода. Подобно оператору if, он проверяет истинность переданного ему условия. Отличие его в том, что он выполняет блок кода, расположенный в фигурных скобках, только в том случае, если условие вернуло значение false.